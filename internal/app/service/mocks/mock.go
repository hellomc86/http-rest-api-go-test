// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "http-rest-api-go/internal/app/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookItem is a mock of BookItem interface.
type MockBookItem struct {
	ctrl     *gomock.Controller
	recorder *MockBookItemMockRecorder
}

// MockBookItemMockRecorder is the mock recorder for MockBookItem.
type MockBookItemMockRecorder struct {
	mock *MockBookItem
}

// NewMockBookItem creates a new mock instance.
func NewMockBookItem(ctrl *gomock.Controller) *MockBookItem {
	mock := &MockBookItem{ctrl: ctrl}
	mock.recorder = &MockBookItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookItem) EXPECT() *MockBookItemMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookItem) Create(book *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", book)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBookItemMockRecorder) Create(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookItem)(nil).Create), book)
}

// Delete mocks base method.
func (m *MockBookItem) Delete(Id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBookItemMockRecorder) Delete(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBookItem)(nil).Delete), Id)
}

// GetAll mocks base method.
func (m *MockBookItem) GetAll() ([]*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockBookItemMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBookItem)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockBookItem) GetById(Id int) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", Id)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockBookItemMockRecorder) GetById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockBookItem)(nil).GetById), Id)
}

// Update mocks base method.
func (m *MockBookItem) Update(Id int, input *model.UpdateBookInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", Id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBookItemMockRecorder) Update(Id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookItem)(nil).Update), Id, input)
}
